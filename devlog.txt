To make Python have something similar to static type checking, use mypy

To use mypy with pysdl without getting a lot of warnings about missing types, 
I use the fully qualified namespace: import sdl2 and then use sdl2.SDL_Whatever, 
don't go from sdl2 import * then try to use SDL_Whatever. I will still have an 
error for the import statement; to fix this, make a mypy.ini file in root that 
suppresses the missing imports warning for this library specifically:

	[mypy-sdl2]
	ignore_missing_imports = True

--------------------------------------------------------------------------------

To implement an interface, use the abc class with abstract methods that simply 
call pass. Overriding will be required in the classes which implement the 
interface.

According to mypy docs, unfortunately:
"Itâ€™s a common error to forget to implement an abstract method ... the class 
definition will not generate an error in this case, but any attempt to 
construct an instance will be flagged as an error."

Use typing.Iterable[InterfaceType] rather than list[InterfaceType] otherwise 
mypy will complain about incompatible types.

When using __init__, it wont be type checked unless you explicitly show the 
return type as -> None. You'll get an error "By default the bodies of untyped 
functions are not checked, consider using --check-untyped-defs". 
https://mypy.readthedocs.io/en/stable/common_issues.html shows this:

	class Bad:
	    def __init__(self):
	        self.value = "asdf"
	        1 + "asdf"  # No error!
	
	bad = Bad()
	bad.value + 1           # No error!
	reveal_type(bad)        # Revealed type is "__main__.Bad"
	reveal_type(bad.value)  # Revealed type is "Any"
	
	class Good:
	    def __init__(self) -> None:  # Explicitly return None
	        self.value = value

--------------------------------------------------------------------------------

I have had an issue where i need to cast to int right before passing values into 
an object's render call

	player = sdl2.SDL_Rect(int(self.x), self.y, self.w, self.h)

As opposed to casting earlier, which creates strange movement issues. Not sure 
if this is an issue or not.

--------------------------------------------------------------------------------

"Parameterized generics cannot be used with class or instance checks"

IOW: you can't do this:

	for item in self.renderables:
		if isinstance(item, Iterable[IRenderable]):
			for subitem in item:
				subitem.render(self.renderer)
		elif type(item) == IRenderable:
			item.render(self.renderer)

You'd need to use isInstance on each subitem too to do a separate IRenderable 
check. But this is unnecessary because self.renderables is already typed anyway, 
so it is guaranteed to contain renderables.

--------------------------------------------------------------------------------

Python getters and setters example
from https://realpython.com/python-getter-setter/

	from datetime import date

	class Employee:
	    def __init__(self, name, birth_date):
        	self.name = name
        	self.birth_date = birth_date

    	@property
    	def name(self):
	        return self._name

    	@name.setter
    	def name(self, value):
	        self._name = value.upper()

	    @property
	    def birth_date(self):
        	return self._birth_date

    	@birth_date.setter
    	def birth_date(self, value):
	        self._birth_date = date.fromisoformat(value)

I can also make my setters cast to the correct type for safety.
Don't need to perform cast on getter because setter means data in class
will be guaranteed to be correct type anyway.

To prevent your setter also being run when instantiating, prefix the property 
names in the constructor with _

--------------------------------------------------------------------------------

It's only SDL_Rect that I need to give integers, so i only need to cast the
inputs there. My classes can store whatever number type otherwise

Update: Not true, collision detection goes weird when mixing floats and ints

I fixed an issue with collision detection by updating the ball's position, 
along with the change in direction. Without doing this, it seems to cause
the direction to flip back and forth repeatedly, causing weird movement.

To change a game object's origin from topleft to midpoint, apparently all I need 
to do is perform a translation when rendering. I don't actually need to move the 
item because the game logic only cares about consistency.

--------------------------------------------------------------------------------

In Python each object is automatically assigned an id at instantiation. This may
be used when dealing with game logic and you need to know which objects were
involved. To use call id(class_name_here)

--------------------------------------------------------------------------------

If i want to use Iterable[my_type] instead of list for static type checking
purposes, but later need to call a list method like .remove(), I can just
cast the iterable to a list and call .remove() on it.